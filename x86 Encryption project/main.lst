     1                                  ;Name: Fardeen Yaqub
     2                                  ;UMBC ID: fyaqub1
     3                                  ;This program allows the user to enter and encrypt strings in two different ways. The user can either split or jump encrypt their string. The program
     4                                  ;allows the user to view current string, read in a new string, split encypt, jump encrypt, or exit the program. The program starts with a default string
     5                                  
     6                                  ;For whatever reason, the jump encryption function will occasionally outputs a random set of characters when showing the jumped string. I talked to the professor about it and he said it was fine since we couldn't fi
     7                                  
     8                                  
     9                                  	extern splitString
    10                                  	extern validate
    11                                  	extern string_mov
    12                                  	extern split_String
    13                                  	extern jump_String
    14                                  	extern square_Root
    15                                  	extern printf
    16                                  	
    17                                  	section .data		
    18 00000000 456E6372797074696F-     options:	db	"Encryption menu options: ", 10
    18 00000009 6E206D656E75206F70-
    18 00000012 74696F6E733A200A   
    19                                  len_o		equ	$-options
    20                                  
    21 0000001A 64202D20646973706C-     display:	db	"d - display current message ", 10
    21 00000023 61792063757272656E-
    21 0000002C 74206D657373616765-
    21 00000035 200A               
    22                                  len_d 		equ	$-display
    23                                  
    24 00000037 72202D207265616420-     read:		db	"r - read new message ", 10
    24 00000040 6E6577206D65737361-
    24 00000049 6765200A           
    25                                  len_r		equ	$-read
    26                                  
    27 0000004D 73202D2073706C6974-     split:		db 	"s - split encrypt ", 10
    27 00000056 20656E637279707420-
    27 0000005F 0A                 
    28                                  len_s		equ	$-split
    29                                  	
    30 00000060 6A202D206A756D7020-     jump:	 	db 	"j - jump encrypt ", 10
    30 00000069 656E6372797074200A 
    31                                  len_j		equ 	$-jump
    32                                  
    33 00000072 71202D207175697420-     quit:	 	db 	"q - quit program ", 10
    33 0000007B 70726F6772616D200A 
    34                                  len_q 		equ	$-quit
    35                                  
    36 00000084 656E746572206F7074-     enter:		db	"enter option letter -> "
    36 0000008D 696F6E206C65747465-
    36 00000096 72202D3E20         
    37                                  len_e 		equ	$-enter
    38                                  
    39 0000009B 43757272656E74206D-     current:	db	"Current message: "
    39 000000A4 6573736167653A20   
    40                                  len_c 		equ	$-current
    41                                  
    42 000000AC 546869732069732074-     defaultM	db	"This is the original message!", 10
    42 000000B5 6865206F726967696E-
    42 000000BE 616C206D6573736167-
    42 000000C7 65210A             
    43                                  len_dm		equ	$-defaultM
    44                                  	
    45 000000CA 456E746572206E6577-     new:	 	db	"Enter new message: "
    45 000000D3 206D6573736167653A-
    45 000000DC 20                 
    46                                  len_n		equ	$-new
    47                                  
    48 000000DD 696E76616C6964206D-     invalid:	db 	"invalid message, keeping current", 10
    48 000000E6 6573736167652C206B-
    48 000000EF 656570696E67206375-
    48 000000F8 7272656E740A       
    49                                  len_i		equ	$-invalid
    50                                  
    51 000000FE 696E76616C6964206F-     invalidO:	db	"invalid option, try again", 10
    51 00000107 7074696F6E2C207472-
    51 00000110 7920616761696E0A   
    52                                  len_io		equ	$-invalidO
    53                                  
    54 00000118 476F6F64627965210A      bye:		db	"Goodbye!", 10
    55 00000121 09                      len_b		db	$-bye
    56                                  	
    57 00000122 0A                      new_line 	db	10	
    58                                  
    59 00000123 257300                  fmt:    db "%s", 0
    60                                  
    61                                  	
    62                                  	section .bss
    63 00000000 <res 0000002D>          string_default 	resb	45
    64 0000002D <res 00000002>          user_option	resb 	2	
    65 0000002F <res 0000002D>          string_new 	resb 	45
    66                                  	
    67                                  	section .text
    68                                  
    69                                  	global main
    70                                  
    71                                  main:
    72 00000000 EB00                    	jmp set_default
    73                                  
    74                                  set_default:
    75                                  	
    76 00000002 48BF-                   	mov rdi, defaultM	;puts default string into string_default
    76 00000004 [AC00000000000000] 
    77 0000000C BA1E000000              	mov rdx, len_dm
    78                                  
    79 00000011 56                      	push rsi
    80 00000012 E8(00000000)            	call string_mov
    81 00000017 5E                      	pop rsi
    82                                  
    83                                  	
    84 00000018 48893425[00000000]      	mov [string_default], rsi
    85                                  	
    86 00000020 41BF1E000000            	mov r15, len_dm		;puts original string length into register
    87                                  
    88 00000026 EB00                    	jmp program
    89                                  	
    90                                  program:	
    91 00000028 B801000000              	mov rax, 1		;displays "Encryption menu options"
    92 0000002D BF01000000              	mov rdi, 1
    93 00000032 48BE-                   	mov rsi, options
    93 00000034 [0000000000000000] 
    94 0000003C BA1A000000              	mov rdx, len_o
    95 00000041 0F05                    	syscall
    96                                  
    97 00000043 B801000000              	mov rax, 1              ;displays "d - display current message"
    98 00000048 BF01000000                      mov rdi, 1
    99 0000004D 48BE-                           mov rsi, display
    99 0000004F [1A00000000000000] 
   100 00000057 BA1D000000                      mov rdx, len_d
   101 0000005C 0F05                            syscall
   102                                  
   103 0000005E B801000000              	mov rax, 1              ;displays "r - read new message"
   104 00000063 BF01000000                      mov rdi, 1
   105 00000068 48BE-                           mov rsi, read
   105 0000006A [3700000000000000] 
   106 00000072 BA16000000                      mov rdx, len_r
   107 00000077 0F05                            syscall
   108                                  
   109 00000079 B801000000              	mov rax, 1              ;displays "s - split encrypt"
   110 0000007E BF01000000                      mov rdi, 1
   111 00000083 48BE-                           mov rsi, split
   111 00000085 [4D00000000000000] 
   112 0000008D BA13000000                      mov rdx, len_s
   113 00000092 0F05                            syscall
   114                                  
   115 00000094 B801000000              	mov rax, 1              ;displays "j - jump encrypt"
   116 00000099 BF01000000                      mov rdi, 1
   117 0000009E 48BE-                           mov rsi, jump
   117 000000A0 [6000000000000000] 
   118 000000A8 BA12000000                      mov rdx, len_j
   119 000000AD 0F05                            syscall
   120                                  
   121 000000AF B801000000              	mov rax, 1              ;displays "q - quit program"
   122 000000B4 BF01000000                      mov rdi, 1
   123 000000B9 48BE-                           mov rsi, quit
   123 000000BB [7200000000000000] 
   124 000000C3 BA12000000                      mov rdx, len_q
   125 000000C8 0F05                            syscall
   126                                  
   127 000000CA B801000000              	mov rax, 1              ;displays "enter option letter -> "
   128 000000CF BF01000000                      mov rdi, 1
   129 000000D4 48BE-                           mov rsi, enter
   129 000000D6 [8400000000000000] 
   130 000000DE BA17000000                      mov rdx, len_e
   131 000000E3 0F05                            syscall
   132                                  	
   133 000000E5 B800000000              	mov rax, 0		;gets user option
   134 000000EA BF00000000              	mov rdi, 0
   135 000000EF 48BE-                   	mov rsi, user_option
   135 000000F1 [2D00000000000000] 
   136 000000F9 BA02000000              	mov rdx, 2
   137 000000FE 0F05                    	syscall 
   138                                  
   139 00000100 30C0                    	xor al, al
   140                                  	
   141 00000102 8A0425[2D000000]        	mov al ,[user_option] 	;jumps to option_display if user picked it
   142 00000109 3C64                    	cmp al, 100
   143 0000010B 7441                    	je option_display
   144                                  
   145 0000010D 8A0425[2D000000]        	mov al ,[user_option]   ;jumps to option_read if user picked it
   146 00000114 3C72                            cmp al, 114
   147 00000116 0F8484000000                    je option_read
   148                                  
   149 0000011C 8A0425[2D000000]        	mov al ,[user_option]   ;jumps to option_split if user picked it
   150 00000123 3C73                            cmp al, 115
   151 00000125 0F844F010000                    je option_split
   152                                  
   153 0000012B 8A0425[2D000000]        	mov al ,[user_option]   ;jumps to option_jump if user picked it
   154 00000132 3C6A                            cmp al, 106
   155 00000134 0F8475010000                    je option_jump
   156                                  
   157 0000013A 8A0425[2D000000]        	mov al ,[user_option]   ;jumps to exit if user picked it
   158 00000141 3C71                            cmp al, 113
   159 00000143 0F84D9010000                    je exit
   160                                  
   161 00000149 E999010000              	jmp option_invalid
   162                                  
   163                                  	
   164                                  option_display:
   165                                  
   166 0000014E B801000000              	mov rax, 1              ;displays "Current message: "
   167 00000153 BF01000000                      mov rdi, 1
   168 00000158 48BE-                           mov rsi, current
   168 0000015A [9B00000000000000] 
   169 00000162 BA11000000                      mov rdx, len_c
   170 00000167 0F05                            syscall
   171                                  
   172                                  	
   173 00000169 B801000000              	mov rax, 1              ;displays current message
   174 0000016E BF01000000                      mov rdi, 1
   175 00000173 488B3425[00000000]              mov rsi, [string_default]
   176 0000017B 4C89FA                          mov rdx, r15
   177 0000017E 0F05                            syscall
   178                                  
   179                                  
   180 00000180 B801000000              	mov rax, 1              ;prints out new line
   181 00000185 BF01000000                      mov rdi, 1
   182 0000018A 48BE-                           mov rsi, new_line
   182 0000018C [2201000000000000] 
   183 00000194 BA01000000                      mov rdx, 1
   184 00000199 0F05                            syscall
   185                                  
   186                                  	
   187 0000019B E988FEFFFF              	jmp program
   188                                  	
   189                                  option_read:
   190                                  
   191 000001A0 B801000000              	mov rax, 1
   192 000001A5 BF01000000              	mov rdi, 1
   193 000001AA 48BE-                   	mov rsi, new
   193 000001AC [CA00000000000000] 
   194 000001B4 BA13000000              	mov rdx, len_n
   195 000001B9 0F05                    	syscall
   196                                  	
   197 000001BB B800000000              	mov rax, 0              ;gets input
   198 000001C0 BF00000000                      mov rdi, 0
   199 000001C5 48BE-                           mov rsi, string_new
   199 000001C7 [2F00000000000000] 
   200 000001CF BA2D000000                      mov rdx, 45
   201 000001D4 0F05                            syscall
   202                                  
   203 000001D6 4D31D2                  	xor r10, r10
   204 000001D9 4D31C9                  	xor r9, r9
   205 000001DC 4989C2                  	mov r10, rax
   206 000001DF 48BF-                   	mov rdi, string_new	
   206 000001E1 [2F00000000000000] 
   207                                  
   208 000001E9 E8(00000000)            	call validate		;validates the new user string
   209                                  	
   210 000001EE 4883F801                	cmp rax, 1		;user entered a correct string
   211 000001F2 7407                    	je correct
   212                                  
   213                                  
   214 000001F4 EB0F                    	jmp read_invalid	;invalid option
   215                                  
   216                                  	
   217 000001F6 E92DFEFFFF              	jmp program
   218                                  
   219                                  correct:
   220                                  
   221 000001FB 30C0                    	xor al, al
   222 000001FD 4D89F9                  	mov r9, r15 		;string defaults old length (CAN PROB DELETE)
   223 00000200 4D89D7                  	mov r15, r10		;new strings length
   224                                  	
   225 00000203 EB3B                    	jmp string_switch
   226                                  	
   227                                  read_invalid:
   228                                  
   229 00000205 B801000000              	mov rax, 1              ;displays "invalid option, try again "
   230 0000020A BF01000000                      mov rdi, 1
   231 0000020F 48BE-                           mov rsi, invalid
   231 00000211 [DD00000000000000] 
   232 00000219 BA21000000                      mov rdx, len_i
   233 0000021E 0F05                            syscall
   234                                  
   235                                  
   236 00000220 B801000000                      mov rax, 1              ;prints out new line
   237 00000225 BF01000000                      mov rdi, 1
   238 0000022A 48BE-                           mov rsi, new_line
   238 0000022C [2201000000000000] 
   239 00000234 BA01000000                      mov rdx, 1
   240 00000239 0F05                            syscall
   241                                  
   242                                  
   243 0000023B E9E8FDFFFF                      jmp program
   244                                  
   245                                  	
   246                                  string_switch:
   247                                  
   248 00000240 4C89FA                  	mov rdx, r15
   249 00000243 48BF-                   	mov rdi, string_new
   249 00000245 [2F00000000000000] 
   250 0000024D 488B3425[00000000]      	mov rsi, [string_default]
   251                                  
   252 00000255 E8(00000000)            	call string_mov
   253                                  	
   254 0000025A B801000000              	mov rax, 1              ;prints out new line
   255 0000025F BF01000000                      mov rdi, 1
   256 00000264 48BE-                           mov rsi, new_line
   256 00000266 [2201000000000000] 
   257 0000026E BA01000000                      mov rdx, 1
   258 00000273 0F05                            syscall
   259                                  
   260                                  	
   261 00000275 E9AEFDFFFF              	jmp program
   262                                  
   263                                  	
   264                                  option_split:
   265                                  
   266 0000027A 4D31C0                  	xor r8, r8
   267 0000027D 48BF-                   	mov rdi, string_default
   267 0000027F [0000000000000000] 
   268 00000287 4C89FE                  	mov rsi, r15		;length of string
   269 0000028A E8(00000000)            	call split_String
   270                                  
   271 0000028F B801000000              	mov rax, 1              ;prints out new line
   272 00000294 BF01000000                      mov rdi, 1
   273 00000299 48BE-                           mov rsi, new_line
   273 0000029B [2201000000000000] 
   274 000002A3 BA01000000                      mov rdx, 1
   275 000002A8 0F05                            syscall
   276                                  
   277                                  	
   278 000002AA E979FDFFFF              	jmp program
   279                                  	
   280                                  option_jump:
   281                                  
   282 000002AF 4831FF                  	xor rdi, rdi
   283 000002B2 4831F6                  	xor rsi, rsi
   284                                  	
   285 000002B5 48BF-                   	mov rdi, string_default
   285 000002B7 [0000000000000000] 
   286 000002BF 4C89FE                  	mov rsi, r15
   287 000002C2 E8(00000000)            	call jump_String
   288                                  
   289 000002C7 B801000000              	mov rax, 1              ;prints out new line
   290 000002CC BF01000000                      mov rdi, 1
   291 000002D1 48BE-                           mov rsi, new_line
   291 000002D3 [2201000000000000] 
   292 000002DB BA01000000                      mov rdx, 1
   293 000002E0 0F05                            syscall
   294                                  
   295                                  	
   296 000002E2 E941FDFFFF              	jmp program
   297                                  	
   298                                  option_invalid:
   299                                  
   300 000002E7 B801000000              	mov rax, 1              ;displays "invalid option, try again "
   301 000002EC BF01000000                      mov rdi, 1
   302 000002F1 48BE-                           mov rsi, invalidO
   302 000002F3 [FE00000000000000] 
   303 000002FB BA1A000000                      mov rdx, len_io
   304 00000300 0F05                            syscall
   305                                  
   306                                  
   307 00000302 B801000000                      mov rax, 1              ;prints out new line
   308 00000307 BF01000000                      mov rdi, 1
   309 0000030C 48BE-                           mov rsi, new_line
   309 0000030E [2201000000000000] 
   310 00000316 BA01000000                      mov rdx, 1
   311 0000031B 0F05                            syscall
   312                                  
   313                                  	
   314 0000031D E906FDFFFF              	jmp program
   315                                  	
   316                                  exit:
   317                                  
   318 00000322 48BF-                   	mov     rdi,fmt     ;prints Goodbye!
   318 00000324 [2301000000000000] 
   319 0000032C 48BE-                           mov     rsi,bye
   319 0000032E [1801000000000000] 
   320 00000336 B800000000                      mov     rax,0
   321 0000033B E8(00000000)                    call    printf
   322                                  
   323                                  	
   324 00000340 B83C000000              	mov rax, 60		;exits program
   325 00000345 4889FF                  	mov rdi, rdi
   326 00000348 0F05                    	syscall

     1                                  
     2                                  ;This function splits the string at a valid index that the user chooses 
     3                                  	
     4                                  	extern printf
     5                                  	extern scanf
     6                                  
     7                                  	section .data
     8 00000000 456E7465722073706C-     location:       db      "Enter split value: "
     8 00000009 69742076616C75653A-
     8 00000012 20                 
     9                                  len_l           equ     $-location
    10                                  
    11 00000013 53706C69742076616C-     invalid:        db      "Split value has to be less than message length. Current Message length is = "
    11 0000001C 75652068617320746F-
    11 00000025 206265206C65737320-
    11 0000002E 7468616E206D657373-
    11 00000037 616765206C656E6774-
    11 00000040 682E2043757272656E-
    11 00000049 74204D657373616765-
    11 00000052 206C656E6774682069-
    11 0000005B 73203D20           
    12                                  len_i           equ     $-invalid
    13                                  
    14 0000005F 696E76616C69642073-     invalid2:       db      "invalid split value", 10
    14 00000068 706C69742076616C75-
    14 00000071 650A               
    15                                  len_i2          equ     $-invalid2
    16                                  
    17 00000073 43757272656E74206D-     current:        db      "Current message: "
    17 0000007C 6573736167653A20   
    18                                  len_c           equ     $-current
    19                                  
    20 00000084 536869667420656E63-     encrypt:        db      "Shift encryption: "
    20 0000008D 72797074696F6E3A20 
    21                                  len_e           equ     $-encrypt
    22                                  
    23                                  	
    24 00000096 0A                      new_line	db	10
    25                                  
    26 00000097 256400                  fmt_scan:	db "%d", 0
    27 0000009A 25730A00                fmt:	db "%s", 10, 0
    28                                  
    29 0000009E 25640A00                fmt_num:    db "%d", 10, 0
    30                                  
    31                                  	
    32                                  	section .bss
    33 00000000 <res 00000004>          user_option     resb    4
    34 00000004 <res 00000002>          print_char	resb	2
    35 00000006 <res 00000023>          original_string 	resb 	35
    36 00000029 <res 00000004>          split_max	resb	4	
    37                                  	
    38                                  	section .text
    39                                  global split_String
    40                                  extern scanf
    41                                  	
    42                                  split_String:
    43                                  
    44 00000000 4D31E4                  	xor r12, r12
    45 00000003 4D31DB                  	xor r11, r11
    46                                  
    47                                  	
    48 00000006 4C8B27                  	mov r12, [rdi]
    49 00000009 4989F6                  	mov r14, rsi
    50                                  
    51 0000000C 4D89F3                  	mov r11, r14
    52 0000000F 49FFCB                  	dec r11
    53                                  	
    54 00000012 4C891C25[29000000]      	mov [split_max], r11
    55                                  
    56 0000001A 4D31DB                  	xor r11, r11
    57                                  	
    58 0000001D 4D89F5                  	mov r13, r14
    59 00000020 4983ED02                	sub r13, 2
    60                                  
    61                                  	
    62 00000024 B801000000              	mov rax, 1              ;displays where do you want to split at
    63 00000029 BF01000000                      mov rdi, 1
    64 0000002E 48BE-                           mov rsi, location
    64 00000030 [0000000000000000] 
    65 00000038 BA13000000                      mov rdx, len_l
    66 0000003D 0F05                            syscall
    67                                  	
    68                                  	
    69 0000003F 48BF-                   	mov     rdi,fmt_scan
    69 00000041 [9700000000000000] 
    70 00000049 48BE-                           mov     rsi, user_option
    70 0000004B [0000000000000000] 
    71 00000053 B800000000                      mov     rax,0 
    72 00000058 E8(00000000)                    call    scanf
    73                                  
    74 0000005D 4D31D2                  	xor r10, r10
    75 00000060 49FFCA                  	dec r10
    76                                  
    77 00000063 44381425[00000000]      	cmp [user_option], r10b	;checks if user option is less than 0
    78 0000006B 0F8CA0000000            	jl invalid_option
    79                                  	
    80 00000071 44382C25[00000000]      	cmp [user_option], r13b	;check if user option is more than length
    81 00000079 0F8F92000000            	jg invalid_option
    82                                  
    83                                  	
    84                                  
    85 0000007F EB00                    	jmp splitString
    86                                  	
    87                                  splitString:	
    88                                  	
    89 00000081 B801000000              	mov rax, 1              ;displays "original string"
    90 00000086 BF01000000                      mov rdi, 1
    91 0000008B 48BE-                           mov rsi, current
    91 0000008D [7300000000000000] 
    92 00000095 BA11000000                      mov rdx, len_c 
    93 0000009A 0F05                            syscall
    94                                  
    95                                  	
    96 0000009C B801000000              	mov rax, 1              ;displays original string
    97 000000A1 BF01000000                      mov rdi, 1
    98 000000A6 4C89E6                          mov rsi, r12
    99 000000A9 4C89FA                          mov rdx, r15
   100 000000AC 0F05                            syscall
   101                                  	
   102                                  
   103 000000AE B801000000              	mov rax, 1              ;displays "encrypted string"
   104 000000B3 BF01000000                      mov rdi, 1
   105 000000B8 48BE-                           mov rsi, encrypt
   105 000000BA [8400000000000000] 
   106 000000C2 BA12000000                      mov rdx, len_e
   107 000000C7 0F05                            syscall
   108                                  
   109                                  	
   110 000000C9 30C0                    	xor al, al
   111 000000CB 4D31DB                          xor r11, r11
   112                                  
   113 000000CE 448A1C25[00000000]              mov r11b, [user_option]
   114 000000D6 49FFC3                          inc r11
   115                                  
   116 000000D9 4D01DC                          add r12, r11
   117 000000DC 418A4424FF                      mov al, [r12-1]
   118                                  
   119 000000E1 880425[04000000]                mov [print_char], al
   120                                  
   121 000000E8 4D31ED                  	xor r13, r13
   122 000000EB 4D89F5                          mov r13, r14
   123 000000EE 4D29DD                          sub r13, r11
   124 000000F1 49FFCD                          dec r13
   125                                  
   126                                  	
   127 000000F4 B801000000              	mov rax, 1              ;displays "a character"
   128 000000F9 BF01000000                      mov rdi, 1
   129 000000FE 48BE-                           mov rsi, print_char
   129 00000100 [0400000000000000] 
   130 00000108 BA01000000                      mov rdx, 1
   131 0000010D 0F05                            syscall
   132                                  
   133                                  
   134                                  	
   135 0000010F EB56                    	jmp valid_option
   136                                  		
   137                                  
   138                                  invalid_option:
   139                                  
   140 00000111 B801000000              	mov rax, 1              ;displays "INVALID"
   141 00000116 BF01000000                      mov rdi, 1
   142 0000011B 48BE-                           mov rsi, invalid2
   142 0000011D [5F00000000000000] 
   143 00000125 BA14000000                      mov rdx, len_i2
   144 0000012A 0F05                            syscall
   145                                  
   146                                  	
   147                                  	
   148 0000012C B801000000              	mov rax, 1              ;displays "INVALID"
   149 00000131 BF01000000                      mov rdi, 1
   150 00000136 48BE-                           mov rsi, invalid
   150 00000138 [1300000000000000] 
   151 00000140 BA4C000000                      mov rdx, len_i
   152 00000145 0F05                            syscall
   153                                  
   154                                  
   155 00000147 48BF-                   	mov     rdi,fmt_num         
   155 00000149 [9E00000000000000] 
   156 00000151 488B3425[29000000]              mov     rsi,[split_max]         
   157 00000159 B800000000                      mov     rax,0           
   158 0000015E E8(00000000)                    call    printf
   159                                  	
   160                                  	
   161 00000163 4831C0                  	xor rax, rax
   162 00000166 C3                      	ret
   163                                  
   164                                  valid_option:
   165                                  	
   166 00000167 4983FE00                	cmp r14, 0
   167 0000016B 7444                    	je done
   168                                  
   169 0000016D 4983FD00                	cmp r13, 0
   170 00000171 7433                    	je reset
   171                                  
   172 00000173 49FFCE                  	dec r14
   173 00000176 49FFCD                  	dec r13
   174 00000179 4983C401                	add r12, 1
   175                                  
   176 0000017D 418A4424FF                      mov al, [r12-1]
   177 00000182 880425[04000000]                mov [print_char], al
   178                                  
   179                                  
   180 00000189 B801000000              	mov rax, 1              ;displays "a character"
   181 0000018E BF01000000                      mov rdi, 1
   182 00000193 48BE-                           mov rsi, print_char
   182 00000195 [0400000000000000] 
   183 0000019D BA01000000                      mov rdx, 1
   184 000001A2 0F05                            syscall
   185                                  
   186                                  	
   187 000001A4 EBC1                    	jmp valid_option
   188                                  
   189                                  reset:
   190                                  	
   191 000001A6 4D29FC                  	sub r12, r15
   192 000001A9 49FFCC                  	dec r12
   193                                  
   194 000001AC 4D01FD                  	add r13, r15
   195 000001AF EBB6                    	jmp valid_option
   196                                  
   197                                  done:
   198 000001B1 B801000000              	mov rax, 1              ;prints out new line
   199 000001B6 BF01000000                      mov rdi, 1
   200 000001BB 48BE-                           mov rsi, new_line
   200 000001BD [9600000000000000] 
   201 000001C5 BA01000000                      mov rdx, 1
   202 000001CA 0F05                            syscall
   203                                  	
   204                                  	
   205 000001CC C3                      	ret
